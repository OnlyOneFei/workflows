<?xml version="1.0" encoding="UTF-8"?>

<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志-->

<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，
    如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds" debug="false">
    <!-- 引入后导致控制台重复打印-->
    <!--    <include resource="org/springframework/boot/logging/logback/base.xml"/>-->
    <contextName>logback</contextName>
    <!-- 如果在Windows环境下使用/开头的路径，将会被指定到项目所在的盘符 -->
    <property name="logHome" value="/logs"/>
    <!-- %d{yyyy-MM-dd HH:mm:ss.SSS}：日志输出时间，精确到分按天切割； -->
    <!-- %-5level：日志级别，并且使用5个字符靠左对齐； %thread：输出日志的进程名字 -->
    <!-- %logger{50}：日志输出者的名字； %msg：日志消息； %n：换行符 -->
    <property name="logPattern" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level ${PID:-} --- [%thread] %logger{80} %method %line : %msg%n"/>
    <logger name="org.activiti" level="ERROR"/>
    <logger name="org.activiti.engine.impl.persistence.entity" level="DEBUG"/>
    <!-- 彩色日志格式 -->
    <property name="logPatternConsole"
              value="%clr([%d{yyyy-MM-dd HH:mm:ss.SSS}]){cyan} %clr(%level) %clr(${PID:-}){magenta} %clr(---){faint} %clr([%thread]){faint}%clr(%logger{80}){cyan} %clr(%method %line:) %msg%n"/>
    <property name="maxFileSize" value="10MB"/>
    <property name="minIndexNum" value="1"/>
    <property name="maxIndexNum" value="10"/>
    <property name="fileCharset" value="UTF-8"/>
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 输出到控制台，一般生产环境都是后台启动，这个没太大作用 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder>
            <pattern>${logPatternConsole}</pattern>
            <charset>${fileCharset}</charset>
        </encoder>
    </appender>
    <!--1. 按照时间轮训 TimeBasedRollingPolicy,只能设置归档日志文件总大小,不能设置单个文件文件大小,可能导致当前文件很大-->
    <!--2. 按照时间和大小进行轮训,发现应用重启时,没办法删除之前的老文件-->
    <!--3. 按照文件大小轮训,好像没暂时发现什么问题,可能导致日志无法追踪。-->
    <!--按照固定文件大小,轮训写文件-->
    <appender name="INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logHome}/info.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${logHome}/info.%i.log.zip</fileNamePattern>
            <minIndex>${minIndexNum}</minIndex>
            <maxIndex>${maxIndexNum}</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>${maxFileSize}</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${fileCharset}</charset>
        </encoder>
    </appender>
    <!-- 输出到error.log文件 -->
    <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logHome}/error.log</file>
        <append>true</append>
        <!--这里设置日志级别为error-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${logHome}/info.%i.log.zip</fileNamePattern>
            <minIndex>${minIndexNum}</minIndex>
            <maxIndex>${maxIndexNum}</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>${maxFileSize}</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${fileCharset}</charset>
        </encoder>
    </appender>
    <!-- 自定义包日志级别要加上additivity="false"，表示不会向上传递 -->
    <logger name="org.mybatis" level="INFO"/>
    <logger name="org.springframework" level="INFO"/>
    <logger name="org.apache" level="INFO"/>
    <!-- root用来指定最基础的日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="INFO_LOG"/>
        <appender-ref ref="ERROR_LOG"/>
        <appender-ref ref="CONSOLE"/>
    </root>
</configuration>